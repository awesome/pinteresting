         describe "where it:" do

            # include_examples "a Settings and Log Out link"
            it { page.should have_link("Settings", :href => edit_member_registration_path) }

            it { page.should have_link("Log Out", :href => destroy_member_session_path) }


            it { page.should have_link("Edit", :href => edit_member_registration_path) }

            it "should display Board count as 0" do
              page.should have_text("#{member.boardcount} Boards")
            end

            it "should display Pin count as 0" do
              page.should have_text("#{member.pincount} Pins")
            end

            

            context "Upon clicking on Settings link" do

              before :each do
                click_link "Settings"
              end

              it "Display Account Settings Page" do
                expect(page.status_code).to be 200
              end

              describe "where it:" do

                include_examples "a Settings and Log Out link"

                it { page.should have_selector("form#edit_member[method = 'post'][action = '/members']", :count => 1) }

                it { page.should have_field("member_firstname", :with => logged_member.firstname) }

                it { page.should have_field("member_lastname", :with => logged_member.lastname ) }

                it { page.should have_field("Email Address", :type => "email", :with => logged_member.email ) }

                it { page.should have_field("Current Password", :type => "password") }

                it { page.should have_field("New Password", :type => "password") }

                it { page.should have_field("Confirm New Password", :type => "password") }

                it { page.should have_field("Avatar", :type => "file") }

                it { page.should have_selector("textarea#member_description") }

                it { page.should have_select("Location", :options => ["United States", "India", "UK"], :selected => logged_member.location) }

                it { page.should have_field("member_gender_female", :checked => false) }

                it { page.should have_field("member_gender_male", :checked => true) }

                it { page.should have_link("Deactivate Account") }

                it { page.should have_link("Cancel", :href => dashboard_path) }

                it { page.should have_selector("input[name = 'commit'][type = 'submit'][value = 'Save Profile']") }

                context "Upon clicking on Deactivate Account link" do

                  before(:each) do
                    click_link "Deactivate Account"
                  end

                  it "member is removed from the database" do
                    expect(Member.find_by_email "kirti@gmail.com").not_to be_a Member
                  end

                  it "and Home Page is displayed" do
                    expect(page.status_code).to be 200
                  end

                end

                context "Upon clicking on Cancel link" do

                  it "Display Dashboard Page" do
                    click_link "Cancel"
                    expect(page.status_code).to be 200
                  end

                end

                context "Upon submitting form by clicking on Save Profile button" do

                  before :each do
                    fill_in "Current Password", :with => "12345678"
                    fill_in "member_firstname", :with => "Kranti"
                    fill_in "About You", with: "I love Music, Fashion and Food."
                    click_button "Save Profile"
                  end

                  let(:member) {Member.find_by_email logged_member.email }

                  it "member profile is updated successfully" do
                    expect(member).to be_a Member
                    expect(member.firstname).to eq "Kranti"
                    expect(member.lastname).to eq logged_member.lastname
                    expect(member.location).to eq logged_member.location
                    expect(member.gender).to eq "female"
                    expect(member.description).to eq "I love Music, Fashion and Food."
                  end

                  it "and Dashboard Page is displayed" do
                    expect(page.status_code).to be 200
                  end

                end

              end

            end

            context "Upon clicking on Log Out link" do

              it "member is logged out successfully" do
                # logout(:member)
                #expect(page).to
              end

              it "and Home Page is displayed" do
                expect(page.status_code).to be 200
              end

            end

          end
